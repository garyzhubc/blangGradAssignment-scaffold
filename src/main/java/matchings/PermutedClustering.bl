package matchings

import matchings.Permutation

model PermutedClustering {
  param Integer nGroups
  param Integer groupSize
  random List<RealVar> means ?: latentRealList(groupSize)
  random List<RealVar> variances ?: latentRealList(groupSize)
  random List<Permutation> permutations ?: {
    val result = new ArrayList
    for (group : 0 ..< nGroups) 
      result.add(new Permutation(groupSize))
    return result
  }
  random Matrix observations ?: latentMatrix(nGroups, groupSize)
  laws {
    // prior
    means.get(0) ~ ContinuousUniform(0,1)
    for (int i : 1..<groupSize) {
      means.get(i) | RealVar mean = means.get(i-1) ~ ContinuousUniform(0+mean,1+mean) 
    }
    for (int i : 0 ..< groupSize) { 
      variances.get(i) ~ Exponential(10)
    }
    for (int i : 0 ..< nGroups) {
    	  permutations.get(i) ~ UniformPermutation
    }
    // likelihood
    for (int j : 0 ..< nGroups) {
      for (int i : 0 ..< groupSize){
    		observations.getRealVar(j, i) | 
    		RealVar mean = means.get(permutations.get(j).getConnections().get(i)), 
    		RealVar variance = variances.get(permutations.get(j).getConnections().get(i))
    		~ Normal(mean,variance)   
      }
    }
  }
}
