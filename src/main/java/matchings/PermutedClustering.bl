package matchings

import matchings.Permutation

model PermutedClustering {
  param Integer nGroups
  param Integer groupSize
  random List<RealVar> means ?: latentRealList(groupSize)
  random List<RealVar> variances ?: latentRealList(groupSize)
  random List<Permutation> permutations ?: {
    val result = new ArrayList
    for (group : 0 ..< nGroups) 
      result.add(new Permutation(groupSize))
    return result
  }
  random Matrix observations ?: latentMatrix(nGroups, groupSize)
  laws {
    /* startRem // Fill this. */
    means.get(0) ~ ContinuousUniform(0.0, 1.0)
    for (int clusterIdx : 1 ..< means.size) {
      means.get(clusterIdx) | RealVar previous = means.get(clusterIdx - 1) ~ ContinuousUniform(previous, previous + 1.0)
    }
    
    for (int clusterIdx : 0 ..< variances.size) {
      variances.get(clusterIdx) ~ Exponential(10.0)
    }
    
    for (int groupIdx : 0 ..< observations.nRows) {
      permutations.get(groupIdx) ~ UniformPermutation
      for (int item : 0 ..< observations.nCols) {
        observations.getRealVar(groupIdx, item) | means, variances, item, Permutation permutation = permutations.get(groupIdx) 
          ~ Normal(
            means.get(permutation.getConnections.get(item)), 
            variances.get(permutation.getConnections.get(item))
          )
      }
    }
    /* endRem */    
  }
}
