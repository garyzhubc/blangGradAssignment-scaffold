package matchings

import matchings.Permutation

model PermutedClustering {
  param Integer nGroups
  param Integer groupSize
  random List<RealVar> means ?: latentRealList(groupSize)
  random List<RealVar> variances ?: latentRealList(groupSize)
  random List<Permutation> permutations ?: {
    val result = new ArrayList
    for (group : 0 ..< nGroups) 
      result.add(new Permutation(groupSize))
    return result
  }
  random Matrix observations ?: latentMatrix(nGroups, groupSize)
  laws {
    // Fill this.
    means.get(0) ~ ContinuousUniform()
    for (int i: 0..< groupSize) {
    	  means.get(i) | RealVar mean = means.get(i-1) ~ ContinuousUniform(mean,mean+1)
    }
    for (int i: 0..< groupSize) {
    	  variances.get(i) ~ Exponential(10)
    }
    for (int j: 0..< nGroups) {
      for (int i: 0..< groupSize) {
      	observations.get(j,indices.get(i)) | 
      	RealVar mean = means.get(i), 
      	RealVar variance = variances.get(i) ~ 
      	Normal(means.get(permutations.get(j).getConnections().get(i)),variances.get(permutations.get(j).getConnections().get(i)))
      }
    }
  }
}
